import { fileSystem } from './filesystem';

const getCurrentDirectory = (currentDir) => {
  const path = currentDir.split('/').filter(p => p && p !== '~');
  let currentObject = fileSystem['~'];
  
  for (const segment of path) {
    if (currentObject.children && currentObject.children[segment] && currentObject.children[segment].type === 'directory') {
      curren    case 'mkdir':
      if (!args[0]) {
        output = 'Usage: mkdir <directory_name>';
      } else {
        const current = getCurrentDirectory(currentDir);
        if (current) {
          if (current.children[args[0]]) {
            output = `mkdir: cannot create directory '${args[0]}': File exists`;
          } else {
            current.children[args[0]] = { type: 'directory', children: {} };
            output = `Created directory ${args[0]}`;
          }
        }
      }
      break;entObject.children[segment];
    } else {
      return null; // Path is invalid
    }
  }
  return currentObject;
};

const renderDirectory = (dir) => {
  if (!dir || !dir.children) return 'Not a directory';
  
  let output = '<div class="directory">';
  const items = Object.entries(dir.children);
  const directories = items.filter(([_, item]) => item.type === 'directory');
  const files = items.filter(([_, item]) => item.type === 'file');
  
  directories.forEach(([name, _]) => {
    output += `<span class="directory-item folder">${name}/</span>`;
  });
  
  files.forEach(([name, _]) => {
    output += `<span class="directory-item file">${name}</span>`;
  });
  
  output += '</div>';
  return output;
};

const renderFileContent = (file) => {
  if (!file || !file.content) return 'Empty file';
  
  let content = file.content;
  content = content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  content = content.replace(/^# (.*)/gm, '<span class="code-blue"># $1</span>');
  content = content.replace(/^## (.*)/gm, '<span class="code-cyan">## $1</span>');
  content = content.replace(/^- (.*)/gm, '<span class="code-green">- $1</span>');
  content = content.replace(/`([^`]+)`/g, '<span class="code-yellow">`$1`</span>');
  
  return `<div class="file-content">${content}</div>`;
};

const generateFastFetch = () => {
  const asciiArt = `
                     - \`
                    .o+\`
                   \`ooo/
                  \`+oooo:
                 \`+oooooo:
                 -+oooooo+:
               \`/:-:++oooo+:
              \`/++++/+++++++:
             \`/++++++++++++++:
            \`/+++ooooooooooooo/\`
           ./ooosssso++osssssso+\`
          .oossssso-  \`\`\`\`/ossssss+\`
         -osssssso.      :ssssssso.
        :osssssss/        osssso+++.
       /ossssssss/        +ssssooo/-
     \`/ossssso+/:-        -:/+osssso+-
    \`+sso+:- \`                \`.-/+oso:
   \`++:.                           \`-/+/
   .\`                                 \`/
`;

  return `<div class="fastfetch">
    <div class="fastfetch-art">${asciiArt}</div>
    <div class="fastfetch-info">
      <div class="fastfetch-row"><div class="fastfetch-label">DE:</div><div>Vivobook_ASUSLaptop X1504VA_F1504)</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">CPU:</div><div>13th Gen Intel(R) Core(TM) i7-135z</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">GPU:</div><div>Intel Iris Xe Graphics @ 1.30 GHz</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">Memory:</div><div>5.00 GiB / 15.25 GiB (33%)</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">Disk:</div><div>39.18 GiB / 936.84 GiB (4%) - ext4</div></div>
      <br>
      <div class="fastfetch-row"><div class="fastfetch-label">OS:</div><div>Arch Linux x86_64</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">Kernel:</div><div>Linux 6.16.5-arch1-1</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">Uptime:</div><div>1 hour, 36 mins</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">Packages:</div><div>1199 (pacman)</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">Shell:</div><div>zsh 5.9</div></div>
      <div class="fastfetch-row"><div class="fastfetch-label">WM:</div><div>ghostty</div></div>
    </div>
  </div>`;
};

// Helper function to parse command arguments with quotes support
const parseArgs = (command) => {
  const args = [];
  let current = '';
  let inQuotes = false;
  let quoteChar = '';

  for (let i = 0; i < command.length; i++) {
    const char = command[i];
    
    if ((char === '"' || char === "'") && (i === 0 || command[i-1] !== '\\')) {
      if (!inQuotes) {
        inQuotes = true;
        quoteChar = char;
      } else if (char === quoteChar) {
        inQuotes = false;
      } else {
        current += char;
      }
    } else if (char === ' ' && !inQuotes) {
      if (current) {
        args.push(current);
        current = '';
      }
    } else {
      current += char;
    }
  }

  if (current) {
    args.push(current);
  }

  return args;
};

export const processCommand = (command, currentDir, setCurrentDir, setHistory, setIsNanoMode, setNanoFile) => {
  // Parse arguments with support for quoted strings
  const args = parseArgs(command.trim());
  const cmd = args.shift() || '';
  let output = '';

  switch (cmd.toLowerCase()) {
    case 'ls':
      const dirToList = getCurrentDirectory(currentDir);
      if (dirToList) {
        output = renderDirectory(dirToList);
      } else {
        output = `ls: cannot access '${currentDir}': No such file or directory`;
      }
      break;
    
    case 'cd':
      if (!args[0] || args[0] === '~') {
        setCurrentDir('~');
      } else if (args[0] === '..') {
        const pathParts = currentDir.split('/').filter(p => p && p !== '~');
        pathParts.pop();
        setCurrentDir(pathParts.length > 0 ? `~/${pathParts.join('/')}` : '~');
      } else {
        const current = getCurrentDirectory(currentDir);
        if (current && current.children && current.children[args[0]] && current.children[args[0]].type === 'directory') {
          setCurrentDir(currentDir === '~' ? `~/${args[0]}` : `${currentDir}/${args[0]}`);
        } else {
          output = `cd: no such directory: ${args[0]}`;
        }
      }
      break;
    
    case 'cat':
      if (!args[0]) {
        output = 'Usage: cat <filename>';
        break;
      }
      const currentCat = getCurrentDirectory(currentDir);
      if (currentCat && currentCat.children && currentCat.children[args[0]] && currentCat.children[args[0]].type === 'file') {
        output = renderFileContent(currentCat.children[args[0]]);
      } else {
        output = `cat: ${args[0]}: No such file`;
      }
      break;
    
    case 'pwd':
      // Print working directory
      if (currentDir === '~') {
        output = '/home/user';
      } else {
        output = '/home/user/' + currentDir.replace('~/', '');
      }
      break;
    
    case 'cp':
      // Copy file
      if (args.length < 2) {
        output = 'Usage: cp <source> <destination>';
        break;
      }
      
      const sourcePath = args[0];
      const destPath = args[1];
      const currentDir1 = getCurrentDirectory(currentDir);
      
      if (!currentDir1) {
        output = `cp: cannot stat '${currentDir}': No such file or directory`;
        break;
      }
      
      if (!currentDir1.children[sourcePath]) {
        output = `cp: cannot stat '${sourcePath}': No such file or directory`;
        break;
      }
      
      // Create a deep copy of the file or directory
      const sourceFile = currentDir1.children[sourcePath];
      currentDir1.children[destPath] = JSON.parse(JSON.stringify(sourceFile));
      output = `Copied ${sourcePath} to ${destPath}`;
      break;
    
    case 'rm':
      // Remove file or directory
      if (!args[0]) {
        output = 'Usage: rm <file_or_directory>';
        break;
      }
      
      const currentDirRm = getCurrentDirectory(currentDir);
      if (!currentDirRm) {
        output = `rm: cannot remove '${args[0]}': No such file or directory`;
        break;
      }
      
      if (!currentDirRm.children[args[0]]) {
        output = `rm: cannot remove '${args[0]}': No such file or directory`;
        break;
      }
      
      // Check if recursive flag is set for directories
      if (currentDirRm.children[args[0]].type === 'directory' && !args.includes('-r') && !args.includes('-rf')) {
        output = `rm: cannot remove '${args[0]}': Is a directory. Use -r flag to remove directories.`;
        break;
      }
      
      delete currentDirRm.children[args[0]];
      output = `Removed ${args[0]}`;
      break;
    
    case 'mv':
      // Move/rename file or directory
      if (args.length < 2) {
        output = 'Usage: mv <source> <destination>';
        break;
      }
      
      const sourceName = args[0];
      const destName = args[1];
      const currentDirMv = getCurrentDirectory(currentDir);
      
      if (!currentDirMv) {
        output = `mv: cannot stat '${currentDir}': No such file or directory`;
        break;
      }
      
      if (!currentDirMv.children[sourceName]) {
        output = `mv: cannot stat '${sourceName}': No such file or directory`;
        break;
      }
      
      // Move the item (rename)
      const sourceItem = currentDirMv.children[sourceName];
      currentDirMv.children[destName] = sourceItem;
      delete currentDirMv.children[sourceName];
      output = `Moved ${sourceName} to ${destName}`;
      break;
    
    case 'echo':
      // Echo text to output
      if (args.length === 0) {
        output = '';
      } else {
        // Join args and strip quotes if present
        let text = args.join(' ');
        if ((text.startsWith('"') && text.endsWith('"')) || 
            (text.startsWith("'") && text.endsWith("'"))) {
          text = text.slice(1, -1);
        }
        output = text;
      }
      break;
    
    case 'whoami':
      // Show current user
      output = 'user';
      break;
    
    case 'grep':
      // Simple grep implementation
      if (args.length < 2) {
        output = 'Usage: grep <pattern> <filename>';
        break;
      }
      
      const pattern = args[0];
      const filename = args[1];
      const currentDirGrep = getCurrentDirectory(currentDir);
      
      if (!currentDirGrep || !currentDirGrep.children[filename]) {
        output = `grep: ${filename}: No such file or directory`;
        break;
      }
      
      if (currentDirGrep.children[filename].type !== 'file') {
        output = `grep: ${filename}: Is a directory`;
        break;
      }
      
      // Create regex from pattern and search file content
      try {
        const regex = new RegExp(pattern, 'g');
        const fileContent = currentDirGrep.children[filename].content;
        const lines = fileContent.split('\n');
        const matchingLines = lines.filter(line => regex.test(line));
        
        if (matchingLines.length > 0) {
          // Highlight matches
          const highlightedLines = matchingLines.map(line => {
            return line.replace(new RegExp(pattern, 'g'), 
              match => `<span class="code-yellow">${match}</span>`);
          });
          output = highlightedLines.join('\n');
        } else {
          output = ''; // No matches
        }
      } catch (error) {
        output = `grep: invalid regular expression: ${error.message}`;
      }
      break;

    case 'help':
      output = `Available commands:
<span class="code-green">ls</span> - List directory contents
<span class="code-green">cd</span> - Change directory
<span class="code-green">cat</span> - Display file content
<span class="code-green">pwd</span> - Print working directory
<span class="code-green">cp</span> - Copy file
<span class="code-green">rm</span> - Remove file or directory
<span class="code-green">mv</span> - Move or rename file
<span class="code-green">echo</span> - Display a line of text
<span class="code-green">whoami</span> - Display current user
<span class="code-green">grep</span> - Search text in files
<span class="code-green">mkdir</span> - Create directory
<span class="code-green">touch</span> - Create empty file
<span class="code-green">clear</span> - Clear the terminal
<span class="code-green">fastfetch</span> - Display system information
<span class="code-green">download cv</span> - Download CV file`;
      break;
    
    case 'download':
      if (args[0] === 'cv') {
        output = 'Downloading CV...';
        const link = document.createElement('a');
        link.href = '/cv.pdf';
        link.download = 'cv.pdf';
        link.click();
      } else {
        output = 'Usage: download cv';
      }
      break;
    
    case 'fastfetch':
      output = generateFastFetch();
      break;
    
    case 'clear':
      setHistory([]);
      return;

    case 'mkdir':
      if (!args[0]) {
        output = 'Usage: mkdir <directory_name>';
      } else {
        const current = getCurrentDirectory(currentDir);
        if (current) {
          if (current.children[args[0]]) {
            output = `mkdir: cannot create directory ‘${args[0]}’: File exists`;
          } else {
            current.children[args[0]] = { type: 'directory', children: {} };
          }
        }
      }
      break;

    case 'touch':
      if (!args[0]) {
        output = 'Usage: touch <file_name>';
      } else {
        const current = getCurrentDirectory(currentDir);
        if (current) {
          if (current.children[args[0]]) {
            // File exists, do nothing (standard touch behavior)
          } else {
            current.children[args[0]] = { type: 'file', content: '' };
          }
        }
      }
      break;
    
    default:
      if (command.trim() !== '') {
        output = `<span class="code-red">command not found: ${cmd}</span>`;
      }
  }
  
  setHistory(prev => [...prev, { command, output }]);
};
